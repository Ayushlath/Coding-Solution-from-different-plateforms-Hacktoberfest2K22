#include<bits/stdc++.h>
using namespace std;

class Solution 
{
    public:
bool isPossible(int arr[], int n, int m, int mid) {
    int sum=0;
    int cnt=1;
    for(int i=0;i<n;i++)
    {
        if(sum+arr[i]<=mid)
        {
            sum+=arr[i];
        }
        else{
            cnt++;
            if(cnt>m|| arr[i]>mid)
            {
                return false;
            }
            sum=arr[i];
        }
        
    }
    return true;
   
}   
    //Function to find minimum number of pages.
    
    int findPages(int arr[], int N, int M) 
    {
    int s = 0;
    int sum = 0;
    int ans = -1;
    if(M>N)return ans;
    
    for(int i = 0; i<N; i++) {
        sum += arr[i];
    }
    int e = sum;
    
    int mid = s + (e-s)/2;
    
    while(s<=e)
    {
        if(isPossible(arr,N,M,mid)) {
            
            ans = mid;
            e = mid - 1;
        }
        else
        {
            s = mid + 1;
        }
        mid = s + (e-s)/2;
    }
    return ans;
}

};

int main() {
    int t;
    cin>>t;
    while(t--){
        int n;
        cin>>n;
        int A[n];
        for(int i=0;i<n;i++){
            cin>>A[i];
        }
        int m;
        cin>>m;
        Solution ob;
        cout << ob.findPages(A, n, m) << endl;
    }
    return 0;
}
// Time Complexity: O(NlogN)
// Space Complexity: O(1)
